services:
  db_main:
    image: postgres:15.12
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${ALGO_RUMBLE_PASSWORD}
      POSTGRES_DB: ${ALGO_RUMBLE_DB}
    ports:
      - ${ALGO_RUMBLE_PORT}:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - algo_rumble_data:/var/lib/postgresql/storage/

  redis:
    image: redis:7.4.2
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.7.0
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.9.2
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${API_SERVER_PORT}:8000
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db_main:
        condition: service_healthy
      kafka:
        condition: service_healthy

  match_consumer:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.service.services.match_consumer
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db_main:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  algo_rumble_data:
